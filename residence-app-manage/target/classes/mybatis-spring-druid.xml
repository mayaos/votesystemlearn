<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
                        http://www.springframework.org/schema/tx
				        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                        http://www.springframework.org/schema/aop
				        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.eastcompeace" />

	<!-- 数据源 -->
<!-- 	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"> -->
<!-- 		<property name="driverClass"><value>com.mysql.jdbc.Driver</value></property>  -->
<!-- 		<property name="jdbcUrl"><value>jdbc:mysql://192.168.7.69:3306/residence_app?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;zeroDateTimeBehavior=convertToNull</value></property> -->
<!-- 		<property name="user"><value>residence</value></property> -->
<!-- 		<property name="password"><value>123456</value></property> -->
		
<!-- 		<property name="minPoolSize"><value>5</value></property> -->
<!-- 		<property name="maxPoolSize"><value>5</value></property> -->
<!-- 		<property name="initialPoolSize"><value>10</value></property> -->
<!-- 		<property name="maxIdleTime"><value>60</value></property> -->
<!-- 		<property name="acquireIncrement"><value>5</value></property> -->
<!-- 		<property name="maxStatements"><value>0</value></property> -->
<!-- 		<property name="idleConnectionTestPeriod"><value>60</value></property> -->
<!-- 		<property name="acquireRetryAttempts"><value>30</value></property> -->
<!-- 		<property name="breakAfterAcquireFailure"><value>true</value></property> -->
<!-- 		<property name="testConnectionOnCheckout"><value>false</value></property> -->
<!-- 	</bean> -->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
<!--         <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://192.168.10.76:3306/residence_app" />
        <property name="username" value="residence" />
        <property name="password" value="123456" /> -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/residence_app" />
        <property name="username" value="root" />
        <property name="password" value="root" />
        
        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />

        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x' FROM DUAL" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 是否自动回收超时连接 -->
	    <property name="removeAbandoned" value="true" />  
	    <!-- 延长这个所谓的超时时间 -->
	    <property name="removeAbandonedTimeout" value="1800" />
        <!-- mysql 不支持 poolPreparedStatements-->
        <!--<property name="poolPreparedStatements" value="true" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->

        <!-- 开启Druid的监控统计功能 -->
<!--         <property name="filters" value="stat" /> -->

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
        <property name="filters" value="stat,wall,log4j" />  
          
        <!--   
            如果配置了proxyFilters，此配置可以不配置  
            druid.stat.mergeSql=true 合并执行的相同sql，避免因为参数不同而统计多条sql语句  
            druid.stat.slowSqlMillis=10000 用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢  
              
        <property name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=10000" />  
         -->  
           
        <!-- 监控统计拦截的filters -->  
        <!-- 并在filters属性中配置了log4j -->  
        <property name="proxyFilters">  
            <list>  
                <ref bean="stat-filter" />  
                <ref bean="log-filter" />  
            </list>  
        </property>  
</bean>

 	<!-- 慢SQL记录-->  
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">  
        <property name="mergeSql" value="true" />  
        <property name="slowSqlMillis" value="10000" />  
        <property name="logSlowSql" value="true" />  
    </bean>  
      
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">  
        <!-- <property name="resultSetLogEnabled" value="false" /> -->  
        <!-- <property name="statementExecutableSqlLogEnable" value="true" /> -->  
    </bean>  
      
    <!-- 配置druid监控spring jdbc -->  
<!--     <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />   -->
   
<!--     <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">   -->
<!--         <property name="patterns">   -->
<!--             <list>   -->
<!--                 <value>com.XXX.stat.service.*</value>   -->
<!--                 <value>com.XXX.stat.dao.*</value>   -->
<!--             </list>   -->
<!--         </property>   -->
<!--     </bean>   -->

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 集成mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation有一个即可，
		  	当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->
		<property name="mapperLocations" value="classpath:com/eastcompeace/**/**/*Mapper.xml"></property>
		<property name="typeAliasesPackage" value="com/eastcompeace/model"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.eastcompeace" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
<!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
<!--     <tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
<!--         <tx:attributes> -->
<!--             <tx:method name="add*" propagation="REQUIRED" /> -->
<!--             <tx:method name="update*" propagation="REQUIRED" /> -->
<!--         </tx:attributes> -->
<!--     </tx:advice> -->
    
<!--     <aop:config expose-proxy="true"> -->
        <!-- 只对业务逻辑层实施事务 -->
<!--         <aop:pointcut id="txPointcut" expression="within(com.eastcompeace.service..*)" /> -->
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
<!--         <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/> -->
<!--     </aop:config> -->

</beans>
